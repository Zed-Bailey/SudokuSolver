@page "/solve"
@using SudokuSolver.UI.Data
@inject GridService _service
@inject NavigationManager _navigation
<style>

    td {
        width: 50px ;
        height: 50px ;
        text-align: center;
    }
    
    tr:nth-of-type(3) td {
         border-bottom: 3px solid red !important;
    }
    
    tr:nth-of-type(6) td {
         border-bottom: 3px solid red !important;
    }
    
    
    td:nth-of-type(3) {
         border-right: 3px solid red !important;
    }
    td:nth-of-type(6) {
         border-right: 3px solid red !important;
    }
    
    td > input {
        width: 50px;
        height: 50px; 
        text-align: center;
    }
    .entered {
        background-color: darkseagreen;
    }
    
    .negativeOne {
        background-color: #ece1be;
    }
    
    .sudoku {
        width: 500px;
        height: 630px;
    }

</style>



<div class="d-flex justify-content-center">
    
    <div class="sudoku">
            
        @if (_solved)
        {
            <h3>Solved on iteration: @_iteration</h3>    
        }
        else
        {
            <h3>Solve iteration: @_iteration</h3>
        }
    
    
        <table >
            <tbody>
                @for (var r = 0; r < Sudoku.Height; r++)
                {
                    <tr>
                        @for (var c = 0; c < Sudoku.Width; c++)
                        {
    
                            var value = _currentBoardIteration[r, c].Value;
                            var style = value == -1 ? "negativeOne" : "entered";
                            <td class="@style">@(value == -1 ? "" : value)</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    
        <div class="mt-4">
            @if (_solveButtonPressed)
            {
                <button class="btn btn-danger" @onclick="() => _solveButtonPressed = false">Stop Solving</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="Start">Start Solving</button>
            }
            
            <button class="btn btn-secondary mx-lg-1" @onclick="GoHome">New Board</button>
        </div>
    
        <div class="mt-3" style="width: 500px;">
            <label for="delayRange" class="form-label">@_delay millisecond delay between updates</label>
            <input type="range" class="form-range" min="10" max="1000" id="delayRange" @bind="@_delay" @bind:event="oninput"/>
        </div>
    
    </div>

</div>




@code {
    Sudoku _sudoku;
    int _iteration;
    int _delay = 500;
    bool _solved;
    bool _solveButtonPressed;
    Cell[,] _currentBoardIteration;
    
    protected override void OnInitialized()
    {
        // if the sudoku instance is null return back to index where user can create a board
        if (_service.SudokuGrid == null)
        {
            _navigation.NavigateTo("/");
            return;
        }
        
        _sudoku = _service.SudokuGrid;
        _currentBoardIteration = _sudoku.CurrentBoard;
    }

    void GoHome() => _navigation.NavigateTo("/");
    
    async void Start()
    {
        _solveButtonPressed = true;
        for (var i = 0; i < 10_000; i++)
        {
            _iteration = i + 1;
            // collapse the board, getting all states from start to end
            var collapseIterations = _sudoku.Collapse();
            
            // display all states
            foreach (var boardState in collapseIterations)
            {
                _currentBoardIteration = boardState;
                // Sudoku.PrintBoard(boardState);
                StateHasChanged();
                await Task.Delay(_delay);
            }
            
            // stop solving if user has pressed the stop solving button
            if (!_solveButtonPressed) break;

            if (!_sudoku.ValidSolve())
            {
                _sudoku.Reset();
                _currentBoardIteration = _sudoku.CurrentBoard;
                StateHasChanged();
                await Task.Delay(_delay);
            }
            else
            {
                _solveButtonPressed = false;
                _solved = true;
                break;
            }
        }
        
        StateHasChanged();
    }
} 