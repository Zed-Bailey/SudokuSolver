@page "/solve"
@using SudokuSolver.UI.Data
@inject GridService _service
@inject NavigationManager _navigation
<style>
    td {
        width: 50px ;
        height: 50px ;
        text-align: center;
    }
    
    tr:nth-of-type(3) td {
         border-bottom: 3px solid red !important;
    }
    
    tr:nth-of-type(6) td {
         border-bottom: 3px solid red !important;
    }
    
    
    td:nth-of-type(3) {
         border-right: 3px solid red !important;
    }
    td:nth-of-type(6) {
         border-right: 3px solid red !important;
    }
    
    td > input {
        width: 50px;
        height: 50px; 
        text-align: center;
    }
    .entered {
        background-color: darkseagreen;
    }
    
    .negativeOne {
        background-color: #ece1be;
    }
</style>

<h3>Solve iteration: @_iteration</h3>

<table >
    <tbody>
    @* @for (var r = 0; r < Sudoku.Height; r++) *@
    @* { *@
    @*     var row = r; *@
    @*     <tr> *@
    @*         @for (var c = 0; c < Sudoku.Width; c++) *@
    @*         { *@
    @*             var col = c; *@
    @*             var value = _sudoku.CurrentBoard[r, c].Value; *@
    @*             var style = value == -1 ? "negativeOne" : "entered"; *@
    @*              *@
    @*             <td class="@style">@_sudoku.CurrentBoard[r, c].Value</td> *@
    @*         } *@
    @*     </tr>  *@
    @* } *@
    
     @for (var r = 0; r < Sudoku.Height; r++)
        {
            var row = r;
            <tr> 
                <td>@_sudoku.CurrentBoard[row, 0].Value</td>
                <td>@_sudoku.CurrentBoard[row, 1].Value</td>
                <td>@_sudoku.CurrentBoard[row, 2].Value</td>
                <td>@_sudoku.CurrentBoard[row, 3].Value</td>
                <td>@_sudoku.CurrentBoard[row, 4].Value</td>
                <td>@_sudoku.CurrentBoard[row, 5].Value</td>
                <td>@_sudoku.CurrentBoard[row, 6].Value</td>
                <td>@_sudoku.CurrentBoard[row, 7].Value</td>
                <td>@_sudoku.CurrentBoard[row, 8].Value</td>
            </tr> 
        }
    </tbody>
</table>

<div class="mt-3">
    <button class="btn btn-primary" @onclick="Start">Start</button>
    <button class="btn btn-secondary" @onclick="GoHome" >Home</button>
</div>



@code {
    Sudoku _sudoku;
    int _iteration;
    
    protected override void OnInitialized()
    {
        // if the sudoku instance is null return back to index where user can create a board
        if (_service.SudokuGrid == null)
        {
            _navigation.NavigateTo("/");
            return;
        }
        
        _sudoku = _service.SudokuGrid;
    }

    void GoHome() => _navigation.NavigateTo("/");
    
    async void Start()
    {
        for (var i = 0; i < 1_000; i++)
        {
            _iteration = i;
            _sudoku.Solve();
            if (!_sudoku.ValidSolve())
            {
                Console.WriteLine("Resetting the board");
                _sudoku.Reset();
            }
            else
            {
                Console.WriteLine($"Solved on iteration {i}");
                break;
            }
            StateHasChanged();
            await Task.Delay(50);
        }
    }

} 